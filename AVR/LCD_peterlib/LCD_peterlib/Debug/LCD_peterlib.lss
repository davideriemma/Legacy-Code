
LCD_peterlib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000031a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000031a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000034c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001017  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000096b  00000000  00000000  0000144b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000838  00000000  00000000  00001db6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000158  00000000  00000000  000025f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004cb  00000000  00000000  00002748  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006d4  00000000  00000000  00002c13  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  000032e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4b 00 	jmp	0x96	; 0x96 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	4c 6f       	ori	r20, 0xFC	; 252
  6a:	61 64       	ori	r22, 0x41	; 65
  6c:	69 6e       	ori	r22, 0xE9	; 233
  6e:	67 20       	and	r6, r7
  70:	48 6f       	ori	r20, 0xF8	; 248
  72:	75 73       	andi	r23, 0x35	; 53
  74:	65 4f       	sbci	r22, 0xF5	; 245
  76:	53 00       	.word	0x0053	; ????

00000078 <__c.1933>:
  78:	57 65 6c 63 6f 6d 65 20 44 61 76 69 64 65 21 00     Welcome Davide!.

00000088 <__c.1940>:
  88:	53 6c 65 65 70 69 6e 67 20 4d 43 55 00 00           Sleeping MCU..

00000096 <__ctors_end>:
  96:	11 24       	eor	r1, r1
  98:	1f be       	out	0x3f, r1	; 63
  9a:	cf ef       	ldi	r28, 0xFF	; 255
  9c:	d8 e0       	ldi	r29, 0x08	; 8
  9e:	de bf       	out	0x3e, r29	; 62
  a0:	cd bf       	out	0x3d, r28	; 61
  a2:	0e 94 57 00 	call	0xae	; 0xae <main>
  a6:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <main>:
}

int main(void)
{
	
	lcd_init(LCD_DISP_ON);
  ae:	8c e0       	ldi	r24, 0x0C	; 12
  b0:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_init>
	return;
}

void inline houseOS_LCD_welcome(void){
	
	lcd_clrscr();
  b4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clrscr>
	lcd_home();
  b8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_home>
	lcd_puts_P("Welcome Davide!");
  bc:	88 e7       	ldi	r24, 0x78	; 120
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 13 01 	call	0x226	; 0x226 <lcd_puts_p>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	8b e7       	ldi	r24, 0x7B	; 123
  c8:	92 e9       	ldi	r25, 0x92	; 146
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x1c>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x26>
  d4:	00 00       	nop
	_delay_ms(3000);
	
	lcd_clrscr();
  d6:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clrscr>
	lcd_puts_P("Loading HouseOS");
  da:	88 e6       	ldi	r24, 0x68	; 104
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 13 01 	call	0x226	; 0x226 <lcd_puts_p>
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	8b e7       	ldi	r24, 0x7B	; 123
  e6:	92 e9       	ldi	r25, 0x92	; 146
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x3a>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x44>
  f2:	00 00       	nop
#include <avr/sleep.h>
#include <avr/power.h>

void inline startSleep(void){
	
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  f4:	83 b7       	in	r24, 0x33	; 51
  f6:	81 7f       	andi	r24, 0xF1	; 241
  f8:	84 60       	ori	r24, 0x04	; 4
  fa:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
  fc:	83 b7       	in	r24, 0x33	; 51
  fe:	81 60       	ori	r24, 0x01	; 1
 100:	83 bf       	out	0x33, r24	; 51
	houseOS_LCD_welcome();
	
	startSleep();
    while (1) 
    {
		lcd_clrscr();
 102:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clrscr>
		lcd_puts_P("Sleeping MCU");
 106:	88 e8       	ldi	r24, 0x88	; 136
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 13 01 	call	0x226	; 0x226 <lcd_puts_p>
		sleep_cpu();
 10e:	88 95       	sleep
 110:	f8 cf       	rjmp	.-16     	; 0x102 <main+0x54>

00000112 <toggle_e>:

    while ( (c = *s++) ) {
        lcd_putc(c);
    }

}/* lcd_puts */
 112:	5f 9a       	sbi	0x0b, 7	; 11
 114:	00 00       	nop
 116:	5f 98       	cbi	0x0b, 7	; 11
 118:	08 95       	ret

0000011a <lcd_write>:
 11a:	cf 93       	push	r28
 11c:	c8 2f       	mov	r28, r24
 11e:	66 23       	and	r22, r22
 120:	11 f0       	breq	.+4      	; 0x126 <lcd_write+0xc>
 122:	5d 9a       	sbi	0x0b, 5	; 11
 124:	01 c0       	rjmp	.+2      	; 0x128 <lcd_write+0xe>
 126:	5d 98       	cbi	0x0b, 5	; 11
 128:	5e 98       	cbi	0x0b, 6	; 11
 12a:	22 9a       	sbi	0x04, 2	; 4
 12c:	23 9a       	sbi	0x04, 3	; 4
 12e:	24 9a       	sbi	0x04, 4	; 4
 130:	25 9a       	sbi	0x04, 5	; 4
 132:	2d 98       	cbi	0x05, 5	; 5
 134:	2c 98       	cbi	0x05, 4	; 5
 136:	2b 98       	cbi	0x05, 3	; 5
 138:	2a 98       	cbi	0x05, 2	; 5
 13a:	cc 23       	and	r28, r28
 13c:	0c f4       	brge	.+2      	; 0x140 <lcd_write+0x26>
 13e:	2d 9a       	sbi	0x05, 5	; 5
 140:	c6 fd       	sbrc	r28, 6
 142:	2c 9a       	sbi	0x05, 4	; 5
 144:	c5 fd       	sbrc	r28, 5
 146:	2b 9a       	sbi	0x05, 3	; 5
 148:	c4 fd       	sbrc	r28, 4
 14a:	2a 9a       	sbi	0x05, 2	; 5
 14c:	0e 94 89 00 	call	0x112	; 0x112 <toggle_e>
 150:	2d 98       	cbi	0x05, 5	; 5
 152:	2c 98       	cbi	0x05, 4	; 5
 154:	2b 98       	cbi	0x05, 3	; 5
 156:	2a 98       	cbi	0x05, 2	; 5
 158:	c3 fd       	sbrc	r28, 3
 15a:	2d 9a       	sbi	0x05, 5	; 5
 15c:	c2 fd       	sbrc	r28, 2
 15e:	2c 9a       	sbi	0x05, 4	; 5
 160:	c1 fd       	sbrc	r28, 1
 162:	2b 9a       	sbi	0x05, 3	; 5
 164:	c0 fd       	sbrc	r28, 0
 166:	2a 9a       	sbi	0x05, 2	; 5
 168:	0e 94 89 00 	call	0x112	; 0x112 <toggle_e>
 16c:	2a 9a       	sbi	0x05, 2	; 5
 16e:	2b 9a       	sbi	0x05, 3	; 5
 170:	2c 9a       	sbi	0x05, 4	; 5
 172:	2d 9a       	sbi	0x05, 5	; 5
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <lcd_read>:
 178:	88 23       	and	r24, r24
 17a:	11 f0       	breq	.+4      	; 0x180 <lcd_read+0x8>
 17c:	5d 9a       	sbi	0x0b, 5	; 11
 17e:	01 c0       	rjmp	.+2      	; 0x182 <lcd_read+0xa>
 180:	5d 98       	cbi	0x0b, 5	; 11
 182:	5e 9a       	sbi	0x0b, 6	; 11
 184:	22 98       	cbi	0x04, 2	; 4
 186:	23 98       	cbi	0x04, 3	; 4
 188:	24 98       	cbi	0x04, 4	; 4
 18a:	25 98       	cbi	0x04, 5	; 4
 18c:	5f 9a       	sbi	0x0b, 7	; 11
 18e:	00 00       	nop
 190:	1a 9b       	sbis	0x03, 2	; 3
 192:	02 c0       	rjmp	.+4      	; 0x198 <lcd_read+0x20>
 194:	80 e1       	ldi	r24, 0x10	; 16
 196:	01 c0       	rjmp	.+2      	; 0x19a <lcd_read+0x22>
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	1b 99       	sbic	0x03, 3	; 3
 19c:	80 62       	ori	r24, 0x20	; 32
 19e:	1c 99       	sbic	0x03, 4	; 3
 1a0:	80 64       	ori	r24, 0x40	; 64
 1a2:	1d 99       	sbic	0x03, 5	; 3
 1a4:	80 68       	ori	r24, 0x80	; 128
 1a6:	5f 98       	cbi	0x0b, 7	; 11
 1a8:	00 00       	nop
 1aa:	5f 9a       	sbi	0x0b, 7	; 11
 1ac:	00 00       	nop
 1ae:	1a 99       	sbic	0x03, 2	; 3
 1b0:	81 60       	ori	r24, 0x01	; 1
 1b2:	1b 99       	sbic	0x03, 3	; 3
 1b4:	82 60       	ori	r24, 0x02	; 2
 1b6:	1c 99       	sbic	0x03, 4	; 3
 1b8:	84 60       	ori	r24, 0x04	; 4
 1ba:	1d 99       	sbic	0x03, 5	; 3
 1bc:	88 60       	ori	r24, 0x08	; 8
 1be:	5f 98       	cbi	0x0b, 7	; 11
 1c0:	08 95       	ret

000001c2 <lcd_waitbusy>:
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_read>
 1c8:	88 23       	and	r24, r24
 1ca:	dc f3       	brlt	.-10     	; 0x1c2 <lcd_waitbusy>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <lcd_waitbusy+0xc>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <lcd_waitbusy+0xe>
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_read>
 1d6:	08 95       	ret

000001d8 <lcd_command>:
 1d8:	cf 93       	push	r28
 1da:	c8 2f       	mov	r28, r24
 1dc:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_waitbusy>
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	8c 2f       	mov	r24, r28
 1e4:	0e 94 8d 00 	call	0x11a	; 0x11a <lcd_write>
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <lcd_clrscr>:
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_command>
 1f2:	08 95       	ret

000001f4 <lcd_home>:
 1f4:	82 e0       	ldi	r24, 0x02	; 2
 1f6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_command>
 1fa:	08 95       	ret

000001fc <lcd_putc>:
 1fc:	cf 93       	push	r28
 1fe:	c8 2f       	mov	r28, r24
 200:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_waitbusy>
 204:	ca 30       	cpi	r28, 0x0A	; 10
 206:	49 f4       	brne	.+18     	; 0x21a <lcd_putc+0x1e>
 208:	80 34       	cpi	r24, 0x40	; 64
 20a:	10 f0       	brcs	.+4      	; 0x210 <lcd_putc+0x14>
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	01 c0       	rjmp	.+2      	; 0x212 <lcd_putc+0x16>
 210:	80 e4       	ldi	r24, 0x40	; 64
 212:	80 58       	subi	r24, 0x80	; 128
 214:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_command>
 218:	04 c0       	rjmp	.+8      	; 0x222 <lcd_putc+0x26>
 21a:	61 e0       	ldi	r22, 0x01	; 1
 21c:	8c 2f       	mov	r24, r28
 21e:	0e 94 8d 00 	call	0x11a	; 0x11a <lcd_write>
 222:	cf 91       	pop	r28
 224:	08 95       	ret

00000226 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 22a:	ec 01       	movw	r28, r24
 22c:	21 96       	adiw	r28, 0x01	; 1
 22e:	fc 01       	movw	r30, r24
 230:	84 91       	lpm	r24, Z
 232:	88 23       	and	r24, r24
 234:	39 f0       	breq	.+14     	; 0x244 <lcd_puts_p+0x1e>
        lcd_putc(c);
 236:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_putc>
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 23a:	fe 01       	movw	r30, r28
 23c:	84 91       	lpm	r24, Z
 23e:	21 96       	adiw	r28, 0x01	; 1
 240:	81 11       	cpse	r24, r1
 242:	f9 cf       	rjmp	.-14     	; 0x236 <lcd_puts_p+0x10>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 244:	df 91       	pop	r29
 246:	cf 91       	pop	r28
 248:	08 95       	ret

0000024a <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 24a:	cf 93       	push	r28
 24c:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 24e:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 250:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 252:	57 9a       	sbi	0x0a, 7	; 10
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 254:	22 9a       	sbi	0x04, 2	; 4
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 256:	23 9a       	sbi	0x04, 3	; 4
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 258:	24 9a       	sbi	0x04, 4	; 4
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 25a:	25 9a       	sbi	0x04, 5	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25c:	8f e9       	ldi	r24, 0x9F	; 159
 25e:	9f e0       	ldi	r25, 0x0F	; 15
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <lcd_init+0x16>
 264:	00 c0       	rjmp	.+0      	; 0x266 <lcd_init+0x1c>
 266:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 268:	2b 9a       	sbi	0x05, 3	; 5
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 26a:	2a 9a       	sbi	0x05, 2	; 5
    lcd_e_toggle();
 26c:	0e 94 89 00 	call	0x112	; 0x112 <toggle_e>
 270:	81 ee       	ldi	r24, 0xE1	; 225
 272:	94 e0       	ldi	r25, 0x04	; 4
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <lcd_init+0x2a>
 278:	00 c0       	rjmp	.+0      	; 0x27a <lcd_init+0x30>
 27a:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 27c:	0e 94 89 00 	call	0x112	; 0x112 <toggle_e>
 280:	95 e1       	ldi	r25, 0x15	; 21
 282:	9a 95       	dec	r25
 284:	f1 f7       	brne	.-4      	; 0x282 <lcd_init+0x38>
 286:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 288:	0e 94 89 00 	call	0x112	; 0x112 <toggle_e>
 28c:	85 e1       	ldi	r24, 0x15	; 21
 28e:	8a 95       	dec	r24
 290:	f1 f7       	brne	.-4      	; 0x28e <lcd_init+0x44>
 292:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 294:	2a 98       	cbi	0x05, 2	; 5
    lcd_e_toggle();
 296:	0e 94 89 00 	call	0x112	; 0x112 <toggle_e>
 29a:	95 e1       	ldi	r25, 0x15	; 21
 29c:	9a 95       	dec	r25
 29e:	f1 f7       	brne	.-4      	; 0x29c <lcd_init+0x52>
 2a0:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 2a2:	88 e2       	ldi	r24, 0x28	; 40
 2a4:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 2a8:	88 e0       	ldi	r24, 0x08	; 8
 2aa:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 2ae:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 2b2:	86 e0       	ldi	r24, 0x06	; 6
 2b4:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 2b8:	8c 2f       	mov	r24, r28
 2ba:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_command>

}/* lcd_init */
 2be:	cf 91       	pop	r28
 2c0:	08 95       	ret

000002c2 <_exit>:
 2c2:	f8 94       	cli

000002c4 <__stop_program>:
 2c4:	ff cf       	rjmp	.-2      	; 0x2c4 <__stop_program>
