
Repetita_Iuvant.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000120  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ac  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b3  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f0  00000000  00000000  0000106b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  0000135c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c1  00000000  00000000  000013ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e6  00000000  00000000  0000176d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001853  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 40 00 	jmp	0x80	; 0x80 <__vector_3>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  78:	0c 94 8e 00 	jmp	0x11c	; 0x11c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <__vector_3>:
#include <avr/interrupt.h>
#include <avr/power.h>
#include <avr/sleep.h>
#include "utility.h"

ISR(PCINT0_vect){
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	0f 92       	push	r0
  88:	11 24       	eor	r1, r1
  8a:	2f 93       	push	r18
  8c:	8f 93       	push	r24
  8e:	9f 93       	push	r25

	cli();		/*anche se si rilascia il bottone, non ce ne frega*/
  90:	f8 94       	cli

	if (bit_is_set(PINB, PINB1))
  92:	19 9b       	sbis	0x03, 1	; 3
  94:	16 c0       	rjmp	.+44     	; 0xc2 <__vector_3+0x42>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	2f e7       	ldi	r18, 0x7F	; 127
  98:	88 e3       	ldi	r24, 0x38	; 56
  9a:	91 e0       	ldi	r25, 0x01	; 1
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	80 40       	sbci	r24, 0x00	; 0
  a0:	90 40       	sbci	r25, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <__vector_3+0x1c>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <__vector_3+0x26>
  a6:	00 00       	nop
	{
		_delay_ms(50);

		if (bit_is_set(PINB, PINB1))
  a8:	19 9b       	sbis	0x03, 1	; 3
  aa:	0b c0       	rjmp	.+22     	; 0xc2 <__vector_3+0x42>
		{
			SET_BIT(PORTB, PINB0);
  ac:	28 9a       	sbi	0x05, 0	; 5
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	89 e6       	ldi	r24, 0x69	; 105
  b2:	98 e1       	ldi	r25, 0x18	; 24
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <__vector_3+0x34>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <__vector_3+0x3e>
  be:	00 00       	nop
			_delay_ms(1000);
			CLEAR_BIT(PORTB, PINB0);
  c0:	28 98       	cbi	0x05, 0	; 5
		}
	}

	sei();	/*da ora in poi però si*/
  c2:	78 94       	sei
	sleep_cpu();
  c4:	88 95       	sleep
}
  c6:	9f 91       	pop	r25
  c8:	8f 91       	pop	r24
  ca:	2f 91       	pop	r18
  cc:	0f 90       	pop	r0
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	0f 90       	pop	r0
  d2:	1f 90       	pop	r1
  d4:	18 95       	reti

000000d6 <main>:

int main(void)
{
	
	SET_OUTPUT_DIR(DDRB, PB0);
  d6:	20 9a       	sbi	0x04, 0	; 4
	SET_INPUT_DIR(DDRB, PB1);	/*imposta pb1 come input.. */
  d8:	21 98       	cbi	0x04, 1	; 4
	SET_BIT(PORTB, PB1);	/*...pullup!*/
  da:	29 9a       	sbi	0x05, 1	; 5
#define SET_INPUT_DIR(DIR, PIN)	CLEAR_BIT(DIR, PIN)
#define TOGGLE_BIT(PORT, PIN)	PORT ^= _BV(PIN)

void inline setPCINTinterrupt(void){

	PCICR |= _BV(PCIE0);
  dc:	e8 e6       	ldi	r30, 0x68	; 104
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	81 60       	ori	r24, 0x01	; 1
  e4:	80 83       	st	Z, r24
	PCMSK0 |= _BV(PCINT1);
  e6:	eb e6       	ldi	r30, 0x6B	; 107
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	82 60       	ori	r24, 0x02	; 2
  ee:	80 83       	st	Z, r24

	sei();
  f0:	78 94       	sei

	setPCINTinterrupt();

	set_sleep_mode(SLEEP_MODE_EXT_STANDBY);
  f2:	83 b7       	in	r24, 0x33	; 51
  f4:	8e 60       	ori	r24, 0x0E	; 14
  f6:	83 bf       	out	0x33, r24	; 51
	
	sleep_enable();
  f8:	83 b7       	in	r24, 0x33	; 51
  fa:	81 60       	ori	r24, 0x01	; 1
  fc:	83 bf       	out	0x33, r24	; 51
	sleep_cpu();    
  fe:	88 95       	sleep

    while (1) 
    {
		TOGGLE_BIT(PORTB, PB0);
 100:	91 e0       	ldi	r25, 0x01	; 1
 102:	85 b1       	in	r24, 0x05	; 5
 104:	89 27       	eor	r24, r25
 106:	85 b9       	out	0x05, r24	; 5
 108:	2f ef       	ldi	r18, 0xFF	; 255
 10a:	30 e7       	ldi	r19, 0x70	; 112
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	30 40       	sbci	r19, 0x00	; 0
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x38>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x42>
 118:	00 00       	nop
 11a:	f3 cf       	rjmp	.-26     	; 0x102 <main+0x2c>

0000011c <_exit>:
 11c:	f8 94       	cli

0000011e <__stop_program>:
 11e:	ff cf       	rjmp	.-2      	; 0x11e <__stop_program>
