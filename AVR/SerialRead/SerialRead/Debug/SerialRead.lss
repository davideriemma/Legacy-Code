
SerialRead.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000006dc  00000770  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800106  00800106  00000776  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000776  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bd9  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000903  00000000  00000000  00001459  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ab  00000000  00000000  00001d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  00002408  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000577  00000000  00000000  00002528  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003f7  00000000  00000000  00002a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002e96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	73 74       	andi	r23, 0x43	; 67
  6a:	72 69       	ori	r23, 0x92	; 146
  6c:	6e 67       	ori	r22, 0x7E	; 126
  6e:	61 20       	and	r6, r1
  70:	6c 65       	ori	r22, 0x5C	; 92
  72:	74 74       	andi	r23, 0x44	; 68
  74:	61 20       	and	r6, r1
	...

00000077 <message.1564>:
  77:	4e 6f 20 4d 65 6d 6f 72 79 20 61 76 61 69 6c 61     No Memory availa
  87:	62 6c 65 0a 00                                      ble..

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d8 e0       	ldi	r29, 0x08	; 8
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ed       	ldi	r30, 0xDC	; 220
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0
  a8:	a6 30       	cpi	r26, 0x06	; 6
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
  ae:	21 e0       	ldi	r18, 0x01	; 1
  b0:	a6 e0       	ldi	r26, 0x06	; 6
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
  b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
  b8:	aa 30       	cpi	r26, 0x0A	; 10
  ba:	b2 07       	cpc	r27, r18
  bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
  be:	0e 94 65 00 	call	0xca	; 0xca <main>
  c2:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <main>:


int main(void)
{
	
	SerialEnable(EIGHT_BIT_FRAME, ONE_BIT_STOP, NO_PARITY, TX_ENABLED | RX_ENABLED, ASYNC_SERIAL);
  ca:	1f 92       	push	r1
  cc:	88 e1       	ldi	r24, 0x18	; 24
  ce:	8f 93       	push	r24
  d0:	1f 92       	push	r1
  d2:	1f 92       	push	r1
  d4:	86 e0       	ldi	r24, 0x06	; 6
  d6:	8f 93       	push	r24
  d8:	0e 94 84 00 	call	0x108	; 0x108 <SerialEnable>
  dc:	0f 90       	pop	r0
  de:	0f 90       	pop	r0
  e0:	0f 90       	pop	r0
  e2:	0f 90       	pop	r0
  e4:	0f 90       	pop	r0
	
	char * c;
	
    while (1) 
	{
		c = readString();
  e6:	0e 94 00 01 	call	0x200	; 0x200 <readString>
  ea:	ec 01       	movw	r28, r24
		printStringfromPgmem(string);
  ec:	88 e6       	ldi	r24, 0x68	; 104
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 de 00 	call	0x1bc	; 0x1bc <printStringfromPgmem>
		printString(c);
  f4:	ce 01       	movw	r24, r28
  f6:	0e 94 c8 00 	call	0x190	; 0x190 <printString>
		transmitByte('\n');
  fa:	8a e0       	ldi	r24, 0x0A	; 10
  fc:	0e 94 c0 00 	call	0x180	; 0x180 <transmitByte>
		
		free(c);
 100:	ce 01       	movw	r24, r28
 102:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <free>
 106:	ef cf       	rjmp	.-34     	; 0xe6 <main+0x1c>

00000108 <SerialEnable>:
#include <stdbool.h>
#include <stdarg.h>
#include "sen.h"
#include "..\..\bitmacro.h"

void SerialEnable(const uint8_t dataFrame, const uint8_t stop_bit, const uint8_t partity_bit, const uint8_t xline, const bool mode, ... ){
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	cd b7       	in	r28, 0x3d	; 61
 10e:	de b7       	in	r29, 0x3e	; 62
 110:	9d 81       	ldd	r25, Y+5	; 0x05
	
	#include <util/setbaud.h>	
	/*il baudrate è stato già impostato*/
	UBRR0H = UBRRH_VALUE;
 112:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
 116:	83 e3       	ldi	r24, 0x33	; 51
 118:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	/*imposta la modalità operativa (sincrona o asincrona)*/
	
	if (mode)
 11c:	89 85       	ldd	r24, Y+9	; 0x09
 11e:	88 23       	and	r24, r24
 120:	39 f0       	breq	.+14     	; 0x130 <SerialEnable+0x28>
	{
		SET_BIT(USART_MODE_REG, SYNC_MODE_BIT);	/*abilita la modalità sincrona*/
 122:	e2 ec       	ldi	r30, 0xC2	; 194
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	80 64       	ori	r24, 0x40	; 64
 12a:	80 83       	st	Z, r24
		
		va_list clock_mode;	/*se viene richiesta una modalità sincrona, tramite l'ellissi è possibile impostare il fronte di clock*/
		va_start(clock_mode, mode);
		
		if (va_arg(clock_mode, bool))
 12c:	0e 94 27 03 	call	0x64e	; 0x64e <abort>
		}
	}
	
	/*imposta la lunghezza del frame*/
	
	if (dataFrame == NINE_BIT_FRAME)
 130:	91 30       	cpi	r25, 0x01	; 1
 132:	71 f4       	brne	.+28     	; 0x150 <SerialEnable+0x48>
	{
		SET_BIT(DATA_FRAME_REG, BIT_FRAME_ZERO);	/*111 - 9-bit frame*/
 134:	e2 ec       	ldi	r30, 0xC2	; 194
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	82 60       	ori	r24, 0x02	; 2
 13c:	80 83       	st	Z, r24
		SET_BIT(DATA_FRAME_REG, BIT_FRAME_ONE);
 13e:	80 81       	ld	r24, Z
 140:	84 60       	ori	r24, 0x04	; 4
 142:	80 83       	st	Z, r24
		SET_BIT(DATA_FRAME_REG_9, BIT_FRAME_TWO);
 144:	e1 ec       	ldi	r30, 0xC1	; 193
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	84 60       	ori	r24, 0x04	; 4
 14c:	80 83       	st	Z, r24
 14e:	05 c0       	rjmp	.+10     	; 0x15a <SerialEnable+0x52>
	}
	else
	{
			DATA_FRAME_REG |= dataFrame;		
 150:	e2 ec       	ldi	r30, 0xC2	; 194
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	89 2b       	or	r24, r25
 158:	80 83       	st	Z, r24
	}
	
	/*imposta il bit di stop, specificato dalle macro passate per argomento*/
	BIT_STOP_REG |= stop_bit;
 15a:	e2 ec       	ldi	r30, 0xC2	; 194
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	90 81       	ld	r25, Z
 160:	8e 81       	ldd	r24, Y+6	; 0x06
 162:	89 2b       	or	r24, r25
 164:	80 83       	st	Z, r24
	
	/*imposta il controllo di parità del frame ricevuto*/
	
	BIT_CONTROL_REG |= partity_bit;
 166:	90 81       	ld	r25, Z
 168:	8f 81       	ldd	r24, Y+7	; 0x07
 16a:	89 2b       	or	r24, r25
 16c:	80 83       	st	Z, r24
	
	/*inizializza le linee di comunicazione*/
	
	COMU_REG |= xline;
 16e:	e1 ec       	ldi	r30, 0xC1	; 193
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	90 81       	ld	r25, Z
 174:	88 85       	ldd	r24, Y+8	; 0x08
 176:	89 2b       	or	r24, r25
 178:	80 83       	st	Z, r24
		
	return;
}
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

00000180 <transmitByte>:
	return;
}

void transmitByte(uint8_t data) {
	/* Wait for empty transmit buffer */
	loop_until_bit_is_set(UCSR0A, UDRE0);
 180:	e0 ec       	ldi	r30, 0xC0	; 192
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	90 81       	ld	r25, Z
 186:	95 ff       	sbrs	r25, 5
 188:	fd cf       	rjmp	.-6      	; 0x184 <transmitByte+0x4>
	UDR0 = data;                                            /* send data */
 18a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 18e:	08 95       	ret

00000190 <printString>:
#include "serialPrint.h"
#include "..\..\bitmacro.h"
#include <avr/io.h>
#include <avr/pgmspace.h>

void printString(const char * string){
 190:	0f 93       	push	r16
 192:	1f 93       	push	r17
 194:	cf 93       	push	r28
 196:	fc 01       	movw	r30, r24

  uint8_t i = 0;

  while (string[i]) {
 198:	80 81       	ld	r24, Z
 19a:	88 23       	and	r24, r24
 19c:	59 f0       	breq	.+22     	; 0x1b4 <printString+0x24>
 19e:	8f 01       	movw	r16, r30
 1a0:	c0 e0       	ldi	r28, 0x00	; 0

	transmitByte(string[i]);
 1a2:	0e 94 c0 00 	call	0x180	; 0x180 <transmitByte>
	i++;
 1a6:	cf 5f       	subi	r28, 0xFF	; 255

void printString(const char * string){

  uint8_t i = 0;

  while (string[i]) {
 1a8:	f8 01       	movw	r30, r16
 1aa:	ec 0f       	add	r30, r28
 1ac:	f1 1d       	adc	r31, r1
 1ae:	80 81       	ld	r24, Z
 1b0:	81 11       	cpse	r24, r1
 1b2:	f7 cf       	rjmp	.-18     	; 0x1a2 <printString+0x12>
	transmitByte(string[i]);
	i++;
  }	

	return;
}
 1b4:	cf 91       	pop	r28
 1b6:	1f 91       	pop	r17
 1b8:	0f 91       	pop	r16
 1ba:	08 95       	ret

000001bc <printStringfromPgmem>:
	/* Wait for empty transmit buffer */
	loop_until_bit_is_set(UCSR0A, UDRE0);
	UDR0 = data;                                            /* send data */
}

void printStringfromPgmem(const char * stringFromPgmem){
 1bc:	0f 93       	push	r16
 1be:	1f 93       	push	r17
 1c0:	cf 93       	push	r28

	uint8_t i = 0;

	while (pgm_read_byte(&stringFromPgmem[i])) {
 1c2:	9c 01       	movw	r18, r24
 1c4:	fc 01       	movw	r30, r24
 1c6:	44 91       	lpm	r20, Z
 1c8:	44 23       	and	r20, r20
 1ca:	71 f0       	breq	.+28     	; 0x1e8 <printStringfromPgmem+0x2c>
 1cc:	8c 01       	movw	r16, r24
 1ce:	c0 e0       	ldi	r28, 0x00	; 0

		transmitByte(pgm_read_byte(&stringFromPgmem[i]));
 1d0:	f9 01       	movw	r30, r18
 1d2:	84 91       	lpm	r24, Z
 1d4:	0e 94 c0 00 	call	0x180	; 0x180 <transmitByte>
		i++;
 1d8:	cf 5f       	subi	r28, 0xFF	; 255

void printStringfromPgmem(const char * stringFromPgmem){

	uint8_t i = 0;

	while (pgm_read_byte(&stringFromPgmem[i])) {
 1da:	98 01       	movw	r18, r16
 1dc:	2c 0f       	add	r18, r28
 1de:	31 1d       	adc	r19, r1
 1e0:	f9 01       	movw	r30, r18
 1e2:	94 91       	lpm	r25, Z
 1e4:	91 11       	cpse	r25, r1
 1e6:	f4 cf       	rjmp	.-24     	; 0x1d0 <printStringfromPgmem+0x14>
		transmitByte(pgm_read_byte(&stringFromPgmem[i]));
		i++;
	}

	return;
}
 1e8:	cf 91       	pop	r28
 1ea:	1f 91       	pop	r17
 1ec:	0f 91       	pop	r16
 1ee:	08 95       	ret

000001f0 <receiveByte>:
#include <avr/io.h>
#include <avr/pgmspace.h>
#include <stdlib.h>

uint8_t receiveByte(void) {
	loop_until_bit_is_set(UCSR0A, RXC0);       /* Wait for incoming data */
 1f0:	e0 ec       	ldi	r30, 0xC0	; 192
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	88 23       	and	r24, r24
 1f8:	ec f7       	brge	.-6      	; 0x1f4 <receiveByte+0x4>
	return UDR0;                                /* return register value */
 1fa:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 1fe:	08 95       	ret

00000200 <readString>:

char * readString(void){
 200:	ff 92       	push	r15
 202:	0f 93       	push	r16
 204:	1f 93       	push	r17
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
	
	static const char message[] PROGMEM = "No Memory available\n";;
	
	char * string = (char * ) malloc(MAX_LINE_LENGTH * sizeof(char));
 20a:	82 e3       	ldi	r24, 0x32	; 50
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 40 01 	call	0x280	; 0x280 <malloc>
 212:	ec 01       	movw	r28, r24
	
	if(string == NULL){
 214:	89 2b       	or	r24, r25
 216:	e9 f4       	brne	.+58     	; 0x252 <readString+0x52>
		
		printStringfromPgmem(message);
 218:	87 e7       	ldi	r24, 0x77	; 119
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 de 00 	call	0x1bc	; 0x1bc <printStringfromPgmem>
		return NULL;
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	27 c0       	rjmp	.+78     	; 0x274 <readString+0x74>

	int i = 0;

	while((byte = receiveByte()) != '\n' && i < MAX_LINE_LENGTH){

		string = realloc(string, sizeof(string) + 1);
 226:	63 e0       	ldi	r22, 0x03	; 3
 228:	70 e0       	ldi	r23, 0x00	; 0
 22a:	ce 01       	movw	r24, r28
 22c:	0e 94 61 02 	call	0x4c2	; 0x4c2 <realloc>
 230:	ec 01       	movw	r28, r24
		
		if (string == NULL)
 232:	00 97       	sbiw	r24, 0x00	; 0
 234:	39 f4       	brne	.+14     	; 0x244 <readString+0x44>
		{
			printStringfromPgmem(message);
 236:	87 e7       	ldi	r24, 0x77	; 119
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 de 00 	call	0x1bc	; 0x1bc <printStringfromPgmem>
			return NULL;
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	18 c0       	rjmp	.+48     	; 0x274 <readString+0x74>
		}
		string[i] = byte;
 244:	fc 01       	movw	r30, r24
 246:	e0 0f       	add	r30, r16
 248:	f1 1f       	adc	r31, r17
 24a:	f0 82       	st	Z, r15
		i++;
 24c:	0f 5f       	subi	r16, 0xFF	; 255
 24e:	1f 4f       	sbci	r17, 0xFF	; 255
 250:	02 c0       	rjmp	.+4      	; 0x256 <readString+0x56>
 252:	00 e0       	ldi	r16, 0x00	; 0
 254:	10 e0       	ldi	r17, 0x00	; 0
	
	char byte;

	int i = 0;

	while((byte = receiveByte()) != '\n' && i < MAX_LINE_LENGTH){
 256:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <receiveByte>
 25a:	f8 2e       	mov	r15, r24
 25c:	8a e0       	ldi	r24, 0x0A	; 10
 25e:	f8 16       	cp	r15, r24
 260:	19 f0       	breq	.+6      	; 0x268 <readString+0x68>
 262:	02 33       	cpi	r16, 0x32	; 50
 264:	11 05       	cpc	r17, r1
 266:	f9 f6       	brne	.-66     	; 0x226 <readString+0x26>
		}
		string[i] = byte;
		i++;
	}
	
	string[i] = 0;
 268:	fe 01       	movw	r30, r28
 26a:	e0 0f       	add	r30, r16
 26c:	f1 1f       	adc	r31, r17
 26e:	10 82       	st	Z, r1

	return string;
 270:	8c 2f       	mov	r24, r28
 272:	9d 2f       	mov	r25, r29
}
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	1f 91       	pop	r17
 27a:	0f 91       	pop	r16
 27c:	ff 90       	pop	r15
 27e:	08 95       	ret

00000280 <malloc>:
 280:	0f 93       	push	r16
 282:	1f 93       	push	r17
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	82 30       	cpi	r24, 0x02	; 2
 28a:	91 05       	cpc	r25, r1
 28c:	10 f4       	brcc	.+4      	; 0x292 <malloc+0x12>
 28e:	82 e0       	ldi	r24, 0x02	; 2
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <__flp>
 296:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <__flp+0x1>
 29a:	20 e0       	ldi	r18, 0x00	; 0
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	a0 e0       	ldi	r26, 0x00	; 0
 2a0:	b0 e0       	ldi	r27, 0x00	; 0
 2a2:	30 97       	sbiw	r30, 0x00	; 0
 2a4:	19 f1       	breq	.+70     	; 0x2ec <malloc+0x6c>
 2a6:	40 81       	ld	r20, Z
 2a8:	51 81       	ldd	r21, Z+1	; 0x01
 2aa:	02 81       	ldd	r16, Z+2	; 0x02
 2ac:	13 81       	ldd	r17, Z+3	; 0x03
 2ae:	48 17       	cp	r20, r24
 2b0:	59 07       	cpc	r21, r25
 2b2:	c8 f0       	brcs	.+50     	; 0x2e6 <malloc+0x66>
 2b4:	84 17       	cp	r24, r20
 2b6:	95 07       	cpc	r25, r21
 2b8:	69 f4       	brne	.+26     	; 0x2d4 <malloc+0x54>
 2ba:	10 97       	sbiw	r26, 0x00	; 0
 2bc:	31 f0       	breq	.+12     	; 0x2ca <malloc+0x4a>
 2be:	12 96       	adiw	r26, 0x02	; 2
 2c0:	0c 93       	st	X, r16
 2c2:	12 97       	sbiw	r26, 0x02	; 2
 2c4:	13 96       	adiw	r26, 0x03	; 3
 2c6:	1c 93       	st	X, r17
 2c8:	27 c0       	rjmp	.+78     	; 0x318 <malloc+0x98>
 2ca:	00 93 08 01 	sts	0x0108, r16	; 0x800108 <__flp>
 2ce:	10 93 09 01 	sts	0x0109, r17	; 0x800109 <__flp+0x1>
 2d2:	22 c0       	rjmp	.+68     	; 0x318 <malloc+0x98>
 2d4:	21 15       	cp	r18, r1
 2d6:	31 05       	cpc	r19, r1
 2d8:	19 f0       	breq	.+6      	; 0x2e0 <malloc+0x60>
 2da:	42 17       	cp	r20, r18
 2dc:	53 07       	cpc	r21, r19
 2de:	18 f4       	brcc	.+6      	; 0x2e6 <malloc+0x66>
 2e0:	9a 01       	movw	r18, r20
 2e2:	bd 01       	movw	r22, r26
 2e4:	ef 01       	movw	r28, r30
 2e6:	df 01       	movw	r26, r30
 2e8:	f8 01       	movw	r30, r16
 2ea:	db cf       	rjmp	.-74     	; 0x2a2 <malloc+0x22>
 2ec:	21 15       	cp	r18, r1
 2ee:	31 05       	cpc	r19, r1
 2f0:	f9 f0       	breq	.+62     	; 0x330 <malloc+0xb0>
 2f2:	28 1b       	sub	r18, r24
 2f4:	39 0b       	sbc	r19, r25
 2f6:	24 30       	cpi	r18, 0x04	; 4
 2f8:	31 05       	cpc	r19, r1
 2fa:	80 f4       	brcc	.+32     	; 0x31c <malloc+0x9c>
 2fc:	8a 81       	ldd	r24, Y+2	; 0x02
 2fe:	9b 81       	ldd	r25, Y+3	; 0x03
 300:	61 15       	cp	r22, r1
 302:	71 05       	cpc	r23, r1
 304:	21 f0       	breq	.+8      	; 0x30e <malloc+0x8e>
 306:	fb 01       	movw	r30, r22
 308:	93 83       	std	Z+3, r25	; 0x03
 30a:	82 83       	std	Z+2, r24	; 0x02
 30c:	04 c0       	rjmp	.+8      	; 0x316 <malloc+0x96>
 30e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__flp+0x1>
 312:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__flp>
 316:	fe 01       	movw	r30, r28
 318:	32 96       	adiw	r30, 0x02	; 2
 31a:	44 c0       	rjmp	.+136    	; 0x3a4 <malloc+0x124>
 31c:	fe 01       	movw	r30, r28
 31e:	e2 0f       	add	r30, r18
 320:	f3 1f       	adc	r31, r19
 322:	81 93       	st	Z+, r24
 324:	91 93       	st	Z+, r25
 326:	22 50       	subi	r18, 0x02	; 2
 328:	31 09       	sbc	r19, r1
 32a:	39 83       	std	Y+1, r19	; 0x01
 32c:	28 83       	st	Y, r18
 32e:	3a c0       	rjmp	.+116    	; 0x3a4 <malloc+0x124>
 330:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
 334:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
 338:	23 2b       	or	r18, r19
 33a:	41 f4       	brne	.+16     	; 0x34c <malloc+0xcc>
 33c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 340:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 344:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <__data_end+0x1>
 348:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <__data_end>
 34c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 350:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 354:	21 15       	cp	r18, r1
 356:	31 05       	cpc	r19, r1
 358:	41 f4       	brne	.+16     	; 0x36a <malloc+0xea>
 35a:	2d b7       	in	r18, 0x3d	; 61
 35c:	3e b7       	in	r19, 0x3e	; 62
 35e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 362:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 366:	24 1b       	sub	r18, r20
 368:	35 0b       	sbc	r19, r21
 36a:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <__data_end>
 36e:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <__data_end+0x1>
 372:	e2 17       	cp	r30, r18
 374:	f3 07       	cpc	r31, r19
 376:	a0 f4       	brcc	.+40     	; 0x3a0 <malloc+0x120>
 378:	2e 1b       	sub	r18, r30
 37a:	3f 0b       	sbc	r19, r31
 37c:	28 17       	cp	r18, r24
 37e:	39 07       	cpc	r19, r25
 380:	78 f0       	brcs	.+30     	; 0x3a0 <malloc+0x120>
 382:	ac 01       	movw	r20, r24
 384:	4e 5f       	subi	r20, 0xFE	; 254
 386:	5f 4f       	sbci	r21, 0xFF	; 255
 388:	24 17       	cp	r18, r20
 38a:	35 07       	cpc	r19, r21
 38c:	48 f0       	brcs	.+18     	; 0x3a0 <malloc+0x120>
 38e:	4e 0f       	add	r20, r30
 390:	5f 1f       	adc	r21, r31
 392:	50 93 07 01 	sts	0x0107, r21	; 0x800107 <__data_end+0x1>
 396:	40 93 06 01 	sts	0x0106, r20	; 0x800106 <__data_end>
 39a:	81 93       	st	Z+, r24
 39c:	91 93       	st	Z+, r25
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <malloc+0x124>
 3a0:	e0 e0       	ldi	r30, 0x00	; 0
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	cf 01       	movw	r24, r30
 3a6:	df 91       	pop	r29
 3a8:	cf 91       	pop	r28
 3aa:	1f 91       	pop	r17
 3ac:	0f 91       	pop	r16
 3ae:	08 95       	ret

000003b0 <free>:
 3b0:	cf 93       	push	r28
 3b2:	df 93       	push	r29
 3b4:	00 97       	sbiw	r24, 0x00	; 0
 3b6:	09 f4       	brne	.+2      	; 0x3ba <free+0xa>
 3b8:	81 c0       	rjmp	.+258    	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 3ba:	fc 01       	movw	r30, r24
 3bc:	32 97       	sbiw	r30, 0x02	; 2
 3be:	13 82       	std	Z+3, r1	; 0x03
 3c0:	12 82       	std	Z+2, r1	; 0x02
 3c2:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <__flp>
 3c6:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <__flp+0x1>
 3ca:	10 97       	sbiw	r26, 0x00	; 0
 3cc:	81 f4       	brne	.+32     	; 0x3ee <free+0x3e>
 3ce:	20 81       	ld	r18, Z
 3d0:	31 81       	ldd	r19, Z+1	; 0x01
 3d2:	82 0f       	add	r24, r18
 3d4:	93 1f       	adc	r25, r19
 3d6:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
 3da:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
 3de:	28 17       	cp	r18, r24
 3e0:	39 07       	cpc	r19, r25
 3e2:	51 f5       	brne	.+84     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 3e4:	f0 93 07 01 	sts	0x0107, r31	; 0x800107 <__data_end+0x1>
 3e8:	e0 93 06 01 	sts	0x0106, r30	; 0x800106 <__data_end>
 3ec:	67 c0       	rjmp	.+206    	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 3ee:	ed 01       	movw	r28, r26
 3f0:	20 e0       	ldi	r18, 0x00	; 0
 3f2:	30 e0       	ldi	r19, 0x00	; 0
 3f4:	ce 17       	cp	r28, r30
 3f6:	df 07       	cpc	r29, r31
 3f8:	40 f4       	brcc	.+16     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3fa:	4a 81       	ldd	r20, Y+2	; 0x02
 3fc:	5b 81       	ldd	r21, Y+3	; 0x03
 3fe:	9e 01       	movw	r18, r28
 400:	41 15       	cp	r20, r1
 402:	51 05       	cpc	r21, r1
 404:	f1 f0       	breq	.+60     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 406:	ea 01       	movw	r28, r20
 408:	f5 cf       	rjmp	.-22     	; 0x3f4 <free+0x44>
 40a:	d3 83       	std	Z+3, r29	; 0x03
 40c:	c2 83       	std	Z+2, r28	; 0x02
 40e:	40 81       	ld	r20, Z
 410:	51 81       	ldd	r21, Z+1	; 0x01
 412:	84 0f       	add	r24, r20
 414:	95 1f       	adc	r25, r21
 416:	c8 17       	cp	r28, r24
 418:	d9 07       	cpc	r29, r25
 41a:	59 f4       	brne	.+22     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 41c:	88 81       	ld	r24, Y
 41e:	99 81       	ldd	r25, Y+1	; 0x01
 420:	84 0f       	add	r24, r20
 422:	95 1f       	adc	r25, r21
 424:	02 96       	adiw	r24, 0x02	; 2
 426:	91 83       	std	Z+1, r25	; 0x01
 428:	80 83       	st	Z, r24
 42a:	8a 81       	ldd	r24, Y+2	; 0x02
 42c:	9b 81       	ldd	r25, Y+3	; 0x03
 42e:	93 83       	std	Z+3, r25	; 0x03
 430:	82 83       	std	Z+2, r24	; 0x02
 432:	21 15       	cp	r18, r1
 434:	31 05       	cpc	r19, r1
 436:	29 f4       	brne	.+10     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 438:	f0 93 09 01 	sts	0x0109, r31	; 0x800109 <__flp+0x1>
 43c:	e0 93 08 01 	sts	0x0108, r30	; 0x800108 <__flp>
 440:	3d c0       	rjmp	.+122    	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 442:	e9 01       	movw	r28, r18
 444:	fb 83       	std	Y+3, r31	; 0x03
 446:	ea 83       	std	Y+2, r30	; 0x02
 448:	49 91       	ld	r20, Y+
 44a:	59 91       	ld	r21, Y+
 44c:	c4 0f       	add	r28, r20
 44e:	d5 1f       	adc	r29, r21
 450:	ec 17       	cp	r30, r28
 452:	fd 07       	cpc	r31, r29
 454:	61 f4       	brne	.+24     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 456:	80 81       	ld	r24, Z
 458:	91 81       	ldd	r25, Z+1	; 0x01
 45a:	84 0f       	add	r24, r20
 45c:	95 1f       	adc	r25, r21
 45e:	02 96       	adiw	r24, 0x02	; 2
 460:	e9 01       	movw	r28, r18
 462:	99 83       	std	Y+1, r25	; 0x01
 464:	88 83       	st	Y, r24
 466:	82 81       	ldd	r24, Z+2	; 0x02
 468:	93 81       	ldd	r25, Z+3	; 0x03
 46a:	9b 83       	std	Y+3, r25	; 0x03
 46c:	8a 83       	std	Y+2, r24	; 0x02
 46e:	e0 e0       	ldi	r30, 0x00	; 0
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	12 96       	adiw	r26, 0x02	; 2
 474:	8d 91       	ld	r24, X+
 476:	9c 91       	ld	r25, X
 478:	13 97       	sbiw	r26, 0x03	; 3
 47a:	00 97       	sbiw	r24, 0x00	; 0
 47c:	19 f0       	breq	.+6      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 47e:	fd 01       	movw	r30, r26
 480:	dc 01       	movw	r26, r24
 482:	f7 cf       	rjmp	.-18     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 484:	8d 91       	ld	r24, X+
 486:	9c 91       	ld	r25, X
 488:	11 97       	sbiw	r26, 0x01	; 1
 48a:	9d 01       	movw	r18, r26
 48c:	2e 5f       	subi	r18, 0xFE	; 254
 48e:	3f 4f       	sbci	r19, 0xFF	; 255
 490:	82 0f       	add	r24, r18
 492:	93 1f       	adc	r25, r19
 494:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
 498:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
 49c:	28 17       	cp	r18, r24
 49e:	39 07       	cpc	r19, r25
 4a0:	69 f4       	brne	.+26     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 4a2:	30 97       	sbiw	r30, 0x00	; 0
 4a4:	29 f4       	brne	.+10     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 4a6:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <__flp+0x1>
 4aa:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__flp>
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4b0:	13 82       	std	Z+3, r1	; 0x03
 4b2:	12 82       	std	Z+2, r1	; 0x02
 4b4:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x1>
 4b8:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end>
 4bc:	df 91       	pop	r29
 4be:	cf 91       	pop	r28
 4c0:	08 95       	ret

000004c2 <realloc>:
 4c2:	a0 e0       	ldi	r26, 0x00	; 0
 4c4:	b0 e0       	ldi	r27, 0x00	; 0
 4c6:	e7 e6       	ldi	r30, 0x67	; 103
 4c8:	f2 e0       	ldi	r31, 0x02	; 2
 4ca:	0c 94 39 03 	jmp	0x672	; 0x672 <__prologue_saves__+0x8>
 4ce:	ec 01       	movw	r28, r24
 4d0:	00 97       	sbiw	r24, 0x00	; 0
 4d2:	21 f4       	brne	.+8      	; 0x4dc <realloc+0x1a>
 4d4:	cb 01       	movw	r24, r22
 4d6:	0e 94 40 01 	call	0x280	; 0x280 <malloc>
 4da:	b4 c0       	rjmp	.+360    	; 0x644 <realloc+0x182>
 4dc:	fc 01       	movw	r30, r24
 4de:	e6 0f       	add	r30, r22
 4e0:	f7 1f       	adc	r31, r23
 4e2:	9c 01       	movw	r18, r24
 4e4:	22 50       	subi	r18, 0x02	; 2
 4e6:	31 09       	sbc	r19, r1
 4e8:	e2 17       	cp	r30, r18
 4ea:	f3 07       	cpc	r31, r19
 4ec:	08 f4       	brcc	.+2      	; 0x4f0 <realloc+0x2e>
 4ee:	a8 c0       	rjmp	.+336    	; 0x640 <realloc+0x17e>
 4f0:	d9 01       	movw	r26, r18
 4f2:	0d 91       	ld	r16, X+
 4f4:	1c 91       	ld	r17, X
 4f6:	11 97       	sbiw	r26, 0x01	; 1
 4f8:	06 17       	cp	r16, r22
 4fa:	17 07       	cpc	r17, r23
 4fc:	b0 f0       	brcs	.+44     	; 0x52a <realloc+0x68>
 4fe:	05 30       	cpi	r16, 0x05	; 5
 500:	11 05       	cpc	r17, r1
 502:	08 f4       	brcc	.+2      	; 0x506 <realloc+0x44>
 504:	9b c0       	rjmp	.+310    	; 0x63c <realloc+0x17a>
 506:	c8 01       	movw	r24, r16
 508:	04 97       	sbiw	r24, 0x04	; 4
 50a:	86 17       	cp	r24, r22
 50c:	97 07       	cpc	r25, r23
 50e:	08 f4       	brcc	.+2      	; 0x512 <realloc+0x50>
 510:	95 c0       	rjmp	.+298    	; 0x63c <realloc+0x17a>
 512:	02 50       	subi	r16, 0x02	; 2
 514:	11 09       	sbc	r17, r1
 516:	06 1b       	sub	r16, r22
 518:	17 0b       	sbc	r17, r23
 51a:	01 93       	st	Z+, r16
 51c:	11 93       	st	Z+, r17
 51e:	6d 93       	st	X+, r22
 520:	7c 93       	st	X, r23
 522:	cf 01       	movw	r24, r30
 524:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <free>
 528:	89 c0       	rjmp	.+274    	; 0x63c <realloc+0x17a>
 52a:	5b 01       	movw	r10, r22
 52c:	a0 1a       	sub	r10, r16
 52e:	b1 0a       	sbc	r11, r17
 530:	4c 01       	movw	r8, r24
 532:	80 0e       	add	r8, r16
 534:	91 1e       	adc	r9, r17
 536:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <__flp>
 53a:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <__flp+0x1>
 53e:	61 2c       	mov	r6, r1
 540:	71 2c       	mov	r7, r1
 542:	e1 2c       	mov	r14, r1
 544:	f1 2c       	mov	r15, r1
 546:	10 97       	sbiw	r26, 0x00	; 0
 548:	09 f4       	brne	.+2      	; 0x54c <realloc+0x8a>
 54a:	46 c0       	rjmp	.+140    	; 0x5d8 <realloc+0x116>
 54c:	8d 91       	ld	r24, X+
 54e:	9c 91       	ld	r25, X
 550:	11 97       	sbiw	r26, 0x01	; 1
 552:	a8 15       	cp	r26, r8
 554:	b9 05       	cpc	r27, r9
 556:	b1 f5       	brne	.+108    	; 0x5c4 <realloc+0x102>
 558:	6c 01       	movw	r12, r24
 55a:	42 e0       	ldi	r20, 0x02	; 2
 55c:	c4 0e       	add	r12, r20
 55e:	d1 1c       	adc	r13, r1
 560:	ca 14       	cp	r12, r10
 562:	db 04       	cpc	r13, r11
 564:	78 f1       	brcs	.+94     	; 0x5c4 <realloc+0x102>
 566:	4c 01       	movw	r8, r24
 568:	8a 18       	sub	r8, r10
 56a:	9b 08       	sbc	r9, r11
 56c:	64 01       	movw	r12, r8
 56e:	42 e0       	ldi	r20, 0x02	; 2
 570:	c4 0e       	add	r12, r20
 572:	d1 1c       	adc	r13, r1
 574:	12 96       	adiw	r26, 0x02	; 2
 576:	bc 90       	ld	r11, X
 578:	12 97       	sbiw	r26, 0x02	; 2
 57a:	13 96       	adiw	r26, 0x03	; 3
 57c:	ac 91       	ld	r26, X
 57e:	b5 e0       	ldi	r27, 0x05	; 5
 580:	cb 16       	cp	r12, r27
 582:	d1 04       	cpc	r13, r1
 584:	40 f0       	brcs	.+16     	; 0x596 <realloc+0xd4>
 586:	b2 82       	std	Z+2, r11	; 0x02
 588:	a3 83       	std	Z+3, r26	; 0x03
 58a:	91 82       	std	Z+1, r9	; 0x01
 58c:	80 82       	st	Z, r8
 58e:	d9 01       	movw	r26, r18
 590:	6d 93       	st	X+, r22
 592:	7c 93       	st	X, r23
 594:	09 c0       	rjmp	.+18     	; 0x5a8 <realloc+0xe6>
 596:	0e 5f       	subi	r16, 0xFE	; 254
 598:	1f 4f       	sbci	r17, 0xFF	; 255
 59a:	80 0f       	add	r24, r16
 59c:	91 1f       	adc	r25, r17
 59e:	f9 01       	movw	r30, r18
 5a0:	91 83       	std	Z+1, r25	; 0x01
 5a2:	80 83       	st	Z, r24
 5a4:	eb 2d       	mov	r30, r11
 5a6:	fa 2f       	mov	r31, r26
 5a8:	e1 14       	cp	r14, r1
 5aa:	f1 04       	cpc	r15, r1
 5ac:	31 f0       	breq	.+12     	; 0x5ba <realloc+0xf8>
 5ae:	d7 01       	movw	r26, r14
 5b0:	13 96       	adiw	r26, 0x03	; 3
 5b2:	fc 93       	st	X, r31
 5b4:	ee 93       	st	-X, r30
 5b6:	12 97       	sbiw	r26, 0x02	; 2
 5b8:	41 c0       	rjmp	.+130    	; 0x63c <realloc+0x17a>
 5ba:	f0 93 09 01 	sts	0x0109, r31	; 0x800109 <__flp+0x1>
 5be:	e0 93 08 01 	sts	0x0108, r30	; 0x800108 <__flp>
 5c2:	3c c0       	rjmp	.+120    	; 0x63c <realloc+0x17a>
 5c4:	68 16       	cp	r6, r24
 5c6:	79 06       	cpc	r7, r25
 5c8:	08 f4       	brcc	.+2      	; 0x5cc <realloc+0x10a>
 5ca:	3c 01       	movw	r6, r24
 5cc:	7d 01       	movw	r14, r26
 5ce:	12 96       	adiw	r26, 0x02	; 2
 5d0:	0d 90       	ld	r0, X+
 5d2:	bc 91       	ld	r27, X
 5d4:	a0 2d       	mov	r26, r0
 5d6:	b7 cf       	rjmp	.-146    	; 0x546 <realloc+0x84>
 5d8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 5dc:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 5e0:	88 16       	cp	r8, r24
 5e2:	99 06       	cpc	r9, r25
 5e4:	e1 f4       	brne	.+56     	; 0x61e <realloc+0x15c>
 5e6:	66 16       	cp	r6, r22
 5e8:	77 06       	cpc	r7, r23
 5ea:	c8 f4       	brcc	.+50     	; 0x61e <realloc+0x15c>
 5ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 5f0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 5f4:	00 97       	sbiw	r24, 0x00	; 0
 5f6:	41 f4       	brne	.+16     	; 0x608 <realloc+0x146>
 5f8:	8d b7       	in	r24, 0x3d	; 61
 5fa:	9e b7       	in	r25, 0x3e	; 62
 5fc:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 600:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 604:	84 1b       	sub	r24, r20
 606:	95 0b       	sbc	r25, r21
 608:	e8 17       	cp	r30, r24
 60a:	f9 07       	cpc	r31, r25
 60c:	c8 f4       	brcc	.+50     	; 0x640 <realloc+0x17e>
 60e:	f0 93 07 01 	sts	0x0107, r31	; 0x800107 <__data_end+0x1>
 612:	e0 93 06 01 	sts	0x0106, r30	; 0x800106 <__data_end>
 616:	f9 01       	movw	r30, r18
 618:	71 83       	std	Z+1, r23	; 0x01
 61a:	60 83       	st	Z, r22
 61c:	0f c0       	rjmp	.+30     	; 0x63c <realloc+0x17a>
 61e:	cb 01       	movw	r24, r22
 620:	0e 94 40 01 	call	0x280	; 0x280 <malloc>
 624:	7c 01       	movw	r14, r24
 626:	00 97       	sbiw	r24, 0x00	; 0
 628:	59 f0       	breq	.+22     	; 0x640 <realloc+0x17e>
 62a:	a8 01       	movw	r20, r16
 62c:	be 01       	movw	r22, r28
 62e:	0e 94 2c 03 	call	0x658	; 0x658 <memcpy>
 632:	ce 01       	movw	r24, r28
 634:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <free>
 638:	c7 01       	movw	r24, r14
 63a:	04 c0       	rjmp	.+8      	; 0x644 <realloc+0x182>
 63c:	ce 01       	movw	r24, r28
 63e:	02 c0       	rjmp	.+4      	; 0x644 <realloc+0x182>
 640:	80 e0       	ldi	r24, 0x00	; 0
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	cd b7       	in	r28, 0x3d	; 61
 646:	de b7       	in	r29, 0x3e	; 62
 648:	ee e0       	ldi	r30, 0x0E	; 14
 64a:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__epilogue_restores__+0x8>

0000064e <abort>:
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	f8 94       	cli
 654:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <_exit>

00000658 <memcpy>:
 658:	fb 01       	movw	r30, r22
 65a:	dc 01       	movw	r26, r24
 65c:	02 c0       	rjmp	.+4      	; 0x662 <memcpy+0xa>
 65e:	01 90       	ld	r0, Z+
 660:	0d 92       	st	X+, r0
 662:	41 50       	subi	r20, 0x01	; 1
 664:	50 40       	sbci	r21, 0x00	; 0
 666:	d8 f7       	brcc	.-10     	; 0x65e <memcpy+0x6>
 668:	08 95       	ret

0000066a <__prologue_saves__>:
 66a:	2f 92       	push	r2
 66c:	3f 92       	push	r3
 66e:	4f 92       	push	r4
 670:	5f 92       	push	r5
 672:	6f 92       	push	r6
 674:	7f 92       	push	r7
 676:	8f 92       	push	r8
 678:	9f 92       	push	r9
 67a:	af 92       	push	r10
 67c:	bf 92       	push	r11
 67e:	cf 92       	push	r12
 680:	df 92       	push	r13
 682:	ef 92       	push	r14
 684:	ff 92       	push	r15
 686:	0f 93       	push	r16
 688:	1f 93       	push	r17
 68a:	cf 93       	push	r28
 68c:	df 93       	push	r29
 68e:	cd b7       	in	r28, 0x3d	; 61
 690:	de b7       	in	r29, 0x3e	; 62
 692:	ca 1b       	sub	r28, r26
 694:	db 0b       	sbc	r29, r27
 696:	0f b6       	in	r0, 0x3f	; 63
 698:	f8 94       	cli
 69a:	de bf       	out	0x3e, r29	; 62
 69c:	0f be       	out	0x3f, r0	; 63
 69e:	cd bf       	out	0x3d, r28	; 61
 6a0:	09 94       	ijmp

000006a2 <__epilogue_restores__>:
 6a2:	2a 88       	ldd	r2, Y+18	; 0x12
 6a4:	39 88       	ldd	r3, Y+17	; 0x11
 6a6:	48 88       	ldd	r4, Y+16	; 0x10
 6a8:	5f 84       	ldd	r5, Y+15	; 0x0f
 6aa:	6e 84       	ldd	r6, Y+14	; 0x0e
 6ac:	7d 84       	ldd	r7, Y+13	; 0x0d
 6ae:	8c 84       	ldd	r8, Y+12	; 0x0c
 6b0:	9b 84       	ldd	r9, Y+11	; 0x0b
 6b2:	aa 84       	ldd	r10, Y+10	; 0x0a
 6b4:	b9 84       	ldd	r11, Y+9	; 0x09
 6b6:	c8 84       	ldd	r12, Y+8	; 0x08
 6b8:	df 80       	ldd	r13, Y+7	; 0x07
 6ba:	ee 80       	ldd	r14, Y+6	; 0x06
 6bc:	fd 80       	ldd	r15, Y+5	; 0x05
 6be:	0c 81       	ldd	r16, Y+4	; 0x04
 6c0:	1b 81       	ldd	r17, Y+3	; 0x03
 6c2:	aa 81       	ldd	r26, Y+2	; 0x02
 6c4:	b9 81       	ldd	r27, Y+1	; 0x01
 6c6:	ce 0f       	add	r28, r30
 6c8:	d1 1d       	adc	r29, r1
 6ca:	0f b6       	in	r0, 0x3f	; 63
 6cc:	f8 94       	cli
 6ce:	de bf       	out	0x3e, r29	; 62
 6d0:	0f be       	out	0x3f, r0	; 63
 6d2:	cd bf       	out	0x3d, r28	; 61
 6d4:	ed 01       	movw	r28, r26
 6d6:	08 95       	ret

000006d8 <_exit>:
 6d8:	f8 94       	cli

000006da <__stop_program>:
 6da:	ff cf       	rjmp	.-2      	; 0x6da <__stop_program>
